/* ========== Root Variables ========== */
:root {
  --bg-color: #ffffff;
  --text-color: #000000;
  --nav-bg: #ffffff;
  --button-bg: #dddddd;
}

body.dark-mode {
  --bg-color: #121212;
  --text-color: #ffffff;
  --nav-bg: #1e1e1e;
  --button-bg: #333333;
}

/* ========== Global Styles ========== */
body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: var(--bg-color);
  color: var(--text-color);
}

/* ========== Navbar ========== */
.navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: var(--nav-bg);
  padding: 10px 20px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.navbar-left {
  display: flex;
  align-items: center;
  gap: 10px;
}

.logo {
  width: 35px;
  height: 35px;
}

.website-name {
  font-size: 1.5rem;
  font-weight: bold;
}

.navbar-right {
  display: flex;
  align-items: center;
  gap: 20px;
}

.nav-links {
  display: flex;
  gap: 30px;
}

.nav-links a {
  text-decoration: none;
  color: var(--text-color);
  font-weight: 700;
  transition: color 0.3s;
}

.nav-links a:hover {
  color: #000000;
}

.mode-toggle {
  background-color: var(--button-bg);
  border: none;
  padding: 6px 12px;
  border-radius: 50px;
  cursor: pointer;
  color: var(--text-color);
  transition: background-color 0.3s, color 0.3s;
}

.profile-pic {
  width: 35px;
  height: 35px;
  border-radius: 50%;
  object-fit: cover;
}

/* ========== Hero Section ========== */
.hero-section {
  margin-top: 50px;
  text-align: center;
}

.hero-section h1 {
  font-size: 2.5rem;
  font-weight: bold;
  color: var(--text-color);
}

/* ========== Input Section ========== */
.task-input-section {
  display: flex;
  gap: 15px;
  justify-content: center;
  align-items: center;
  margin-top: 40px;
}

.task-input {
  width: 20%;
  padding: 15px;
  font-size: 1rem;
  border: 1px solid #ccc;
  border-radius: 50px;
}

.add-task-btn,
.assign-task-btn {
  padding: 15px 15px;
  font-size: 1rem;
  border: none;
  border-radius: 50px;
  background-color: #94e0b0;
  color: rgb(0, 0, 0);
  cursor: pointer;
  transition: background-color 0.3s;
  font-weight: 700;
}

.add-task-btn:hover,
.assign-task-btn:hover {
  background-color: #1b522f;
}

/* ========== Tab Section ========== */
.tab-section {
  margin-top: 50px;
  text-align: center;
}

.tabs {
  display: flex;
  justify-content: center;
  gap: 40px;
  position: relative;
}

.tab {
  padding: 10px;
  font-size: 1.1rem;
  cursor: pointer;
  position: relative;
  color: var(--text-color);
  font-weight: 500;
}

.tab.active {
  border-bottom: 3px solid #94e0b0;
}

.tab-underline {
  width: 377px;
  height: 1px;
  background-color: #94e0b0;
  margin: 10px auto 0 auto;
}

/* ========== Task List Section ========== */
.task-lists-section {
  margin-top: 30px;
  display: flex;
  justify-content: center;
}

.task-list {
  width: 50%;
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.task-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  background-color: var(--nav-bg);
  padding: 10px 15px;
  border-radius: 8px;
  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.05);
}

.task-check {
  margin-right: 10px;
  transform: scale(1.2);
}

.task-text {
  flex: 1;
  font-size: 1rem;
  color: var(--text-color);
}

.task-actions {
  display: flex;
  gap: 10px;
}

.edit-btn,
.delete-btn {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 1.2rem;
  color: #555;
  transition: transform 0.2s, color 0.3s;
}

.edit-btn:hover,
.delete-btn:hover {
  transform: scale(1.2);
  color: #e74c3c;
}

/* ========== Modal ========== */
.modal {
  display: none;
  position: fixed;
  z-index: 999;
  left: 0;
  top: 0;
  width: 100vw;
  height: 100vh;
  background-color: rgba(0, 0, 0, 0.6);
  justify-content: center;
  align-items: center;
}

.modal-content {
  background: var(--nav-bg);
  color: var(--text-color);
  padding: 30px;
  border-radius: 10px;
  width: 300px;
  display: flex;
  flex-direction: column;
  gap: 15px;
  position: relative;
}

.modal-content input,
.modal-content select {
  padding: 10px;
  border-radius: 5px;
  border: 1px solid #ccc;
}

.modal-content button {
  padding: 10px;
  background-color: #2d89ff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.close-btn,
.close-edit-btn {
  position: absolute;
  right: 10px;
  top: 5px;
  font-size: 20px;
  cursor: pointer;
}

/* ========== Custom Checkbox ========== */
.custom-checkbox {
  display: inline-block;
  position: relative;
  cursor: pointer;
  margin-right: 10px;
}

.custom-checkbox input {
  opacity: 0;
  position: absolute;
  cursor: pointer;
  height: 0;
  width: 0;
}

.custom-checkbox .checkmark {
  height: 18px;
  width: 18px;
  background-color: #ccc;
  border-radius: 4px;
  display: inline-block;
  vertical-align: middle;
  transition: background-color 0.2s;
}

.custom-checkbox input:checked + .checkmark {
  background-color: #2ecc71;
}

.custom-checkbox .checkmark:after {
  content: "";
  position: absolute;
  display: none;
}

.custom-checkbox input:checked + .checkmark:after {
  display: block;
}

.custom-checkbox .checkmark:after {
  left: 6px;
  top: 2px;
  width: 5px;
  height: 10px;
  border: solid white;
  border-width: 0 2px 2px 0;
  transform: rotate(45deg);
}


/* undo button css  */

.undo-toast {
  position: fixed;
  bottom: 20px;
  left: 20px;
  background-color: #333;
  color: white;
  padding: 10px 15px;
  border-radius: 5px;
  display: none; /* hidden by default */
  align-items: center;
  gap: 10px;
  font-size: 0.9rem;
  z-index: 1000;
}

.undo-toast button {
  background-color: #94e0b0;
  border: none;
  padding: 5px 10px;
  border-radius: 4px;
  cursor: pointer;
  font-weight: 700;
  color: black;
  transition: background-color 0.3s;
}

.undo-toast button:hover {
  background-color: #1b522f;
}


// ======= Light/Dark Mode Toggle =======
const toggleBtn = document.getElementById("modeToggle");
const icon = toggleBtn.querySelector("i");

toggleBtn.addEventListener("click", () => {
  document.body.classList.toggle("dark-mode");
  const isDark = document.body.classList.contains("dark-mode");
  icon.className = isDark ? "fas fa-sun" : "fas fa-moon";
});

// responsive nav bar 





// ======= Tabs and Task Logic =======
const tabs = document.querySelectorAll(".tab");
const taskLists = document.querySelectorAll(".task-list");
let activeTab = "today";

function loadTasks() {
  const stored = localStorage.getItem("tasks");
  return stored ? JSON.parse(stored) : { today: [], week: [], month: [], year: [] };
}

function saveTasks(tasks) {
  localStorage.setItem("tasks", JSON.stringify(tasks));
}

function renderTasks() {
  const tasks = loadTasks();

  taskLists.forEach(list => {
    const tab = list.getAttribute("data-tab");
    list.innerHTML = "";

    if (tab === activeTab) {
      list.style.display = "flex";

      tasks[tab].forEach((task, index) => {
        const taskEl = document.createElement("div");
        taskEl.className = "task-item";

        taskEl.innerHTML = `
          <label class="custom-checkbox">
            <input type="checkbox" class="task-check" ${task.done ? "checked" : ""} />
            <span class="checkmark"></span>
          </label>
          <span class="task-text" style="${task.done ? 'text-decoration: none;' : ''}">${task.text}</span>
          <div class="task-actions">
            <button class="edit-btn"><i class="fas fa-pen"></i></button>
            <button class="delete-btn"><i class="fas fa-trash"></i></button>
          </div>
        `;

        taskEl.querySelector(".task-check").addEventListener("change", () => {
          task.done = !task.done;
          saveTasks(tasks);
          renderTasks();
        });

        taskEl.querySelector(".delete-btn").addEventListener("click", () => {
  deleteTaskWithUndo(tab, index);
});

        taskEl.querySelector(".edit-btn").addEventListener("click", () => {
          openEditModal(tab, index, task.text);
        });

        list.appendChild(taskEl);
      });

    } else {
      list.style.display = "none";
    }
  });
}

function updateActiveTab(newTab) {
  tabs.forEach(t => t.classList.remove("active"));
  const tab = Array.from(tabs).find(t => t.dataset.tab === newTab);
  if (tab) tab.classList.add("active");
  activeTab = newTab;
  renderTasks();
}

tabs.forEach(tab => {
  tab.addEventListener("click", () => {
    updateActiveTab(tab.dataset.tab);
  });
});

// Always add to today tab
const addTaskBtn = document.querySelector(".add-task-btn");
addTaskBtn.addEventListener("click", () => {
  const input = document.querySelector(".task-input");
  const text = input.value.trim();
  if (!text) return;

  const tasks = loadTasks();
  tasks['today'].push({ text, done: false });
  saveTasks(tasks);
  input.value = "";
  if (activeTab === 'today') renderTasks();
});

// ======= Add Task Modal =======
const modal = document.getElementById("taskModal");
const modalInput = document.getElementById("modalTaskInput");
const modalSelect = document.getElementById("modalTabSelect");
const modalAddBtn = document.getElementById("modalAddBtn");
const modalCloseBtn = document.querySelector(".close-btn");
const openModalBtn = document.querySelector(".assign-task-btn");

openModalBtn.addEventListener("click", () => {
  modal.style.display = "flex";
  modalInput.value = "";
  modalSelect.value = "week";
});

modalCloseBtn.addEventListener("click", () => {
  modal.style.display = "none";
});

modalAddBtn.addEventListener("click", () => {
  const text = modalInput.value.trim();
  const tab = modalSelect.value;
  if (!text) return;

  const tasks = loadTasks();
  tasks[tab].push({ text, done: false });
  saveTasks(tasks);
  modal.style.display = "none";
  if (activeTab === tab) renderTasks();
});

window.addEventListener("click", (e) => {
  if (e.target === modal) {
    modal.style.display = "none";
  }
});

// ======= Edit Modal =======
const editModal = document.getElementById("editModal");
const editTaskInput = document.getElementById("editTaskInput");
const editSaveBtn = document.getElementById("editSaveBtn");
const editCloseBtn = document.querySelector(".close-edit-btn");

let editTarget = { tab: null, index: null };

function openEditModal(tab, index, currentText) {
  editTarget = { tab, index };
  editTaskInput.value = currentText;
  editModal.style.display = "flex";
}

editSaveBtn.addEventListener("click", () => {
  const newText = editTaskInput.value.trim();
  if (!newText) return;

  const tasks = loadTasks();
  tasks[editTarget.tab][editTarget.index].text = newText;
  saveTasks(tasks);
  editModal.style.display = "none";
  if (activeTab === editTarget.tab) renderTasks();
});

editCloseBtn.addEventListener("click", () => {
  editModal.style.display = "none";
});

window.addEventListener("click", (e) => {
  if (e.target === editModal) {
    editModal.style.display = "none";
  }
});

// ======= Initial Setup =======
updateActiveTab(activeTab);

// undo btn script 

const undoToast = document.getElementById('undoToast');
const undoBtn = document.getElementById('undoBtn');

let deletedTask = null; // to store last deleted task info
let undoTimeout = null;

// Modify your delete button event listener to this:
function deleteTaskWithUndo(tab, index) {
  const tasks = loadTasks();

  // Save deleted task for undo
  deletedTask = {
    tab,
    index,
    task: tasks[tab][index]
  };

  // Remove the task
  tasks[tab].splice(index, 1);
  saveTasks(tasks);
  renderTasks();

  // Show toast
  undoToast.style.display = 'flex';

  // Clear any previous timeout
  if (undoTimeout) clearTimeout(undoTimeout);

  // Hide toast after 5 seconds
  undoTimeout = setTimeout(() => {
    undoToast.style.display = 'none';
    deletedTask = null;
  }, 5000);
}

// Undo button click handler
undoBtn.addEventListener('click', () => {
  if (deletedTask) {
    const tasks = loadTasks();

    // Reinsert the deleted task at its original position
    tasks[deletedTask.tab].splice(deletedTask.index, 0, deletedTask.task);
    saveTasks(tasks);
    renderTasks();

    // Hide the toast and clear undo info & timeout
    undoToast.style.display = 'none';
    deletedTask = null;
    clearTimeout(undoTimeout);
  }
});



// Check Sound 



----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


// ======= Light/Dark Mode Toggle =======
const toggleBtn = document.getElementById("modeToggle");
const icon = toggleBtn.querySelector("i");

toggleBtn.addEventListener("click", () => {
  document.body.classList.toggle("dark-mode");
  const isDark = document.body.classList.contains("dark-mode");
  icon.className = isDark ? "fas fa-sun" : "fas fa-moon";
});

// ======= Tabs and Task Logic =======
const tabs = document.querySelectorAll(".tab");
const taskLists = document.querySelectorAll(".task-list");
let activeTab = "today";

// Create audio element for sound playback
const audio = document.createElement('audio');
audio.src = 'sounds/checked.mp3';
audio.preload = 'auto';
document.body.appendChild(audio);

function loadTasks() {
  const stored = localStorage.getItem("tasks");
  return stored ? JSON.parse(stored) : { today: [], week: [], month: [], year: [] };
}

function saveTasks(tasks) {
  localStorage.setItem("tasks", JSON.stringify(tasks));
}

function renderTasks() {
  const tasks = loadTasks();

  taskLists.forEach(list => {
    const tab = list.getAttribute("data-tab");
    list.innerHTML = "";

    if (tab === activeTab) {
      list.style.display = "flex";

      tasks[tab].forEach((task, index) => {
        const taskEl = document.createElement("div");
        taskEl.className = "task-item";

        taskEl.innerHTML = `
          <label class="custom-checkbox">
            <input type="checkbox" class="task-check" ${task.done ? "checked" : ""} />
            <span class="checkmark"></span>
          </label>
          <span class="task-text" style="${task.done ? 'text-decoration: none;' : ''}">${task.text}</span>
          <div class="task-actions">
            <button class="edit-btn"><i class="fas fa-pen"></i></button>
            <button class="delete-btn"><i class="fas fa-trash"></i></button>
          </div>
        `;

        const checkbox = taskEl.querySelector(".task-check");

        // Attach event listener to play sound on check
        checkbox.addEventListener("change", () => {
          task.done = checkbox.checked;
          saveTasks(tasks);
          renderTasks();

          // Play sound if checked
          if (checkbox.checked) {
            audio.currentTime = 0; // Reset audio to start
            audio.play(); // Play sound
          }
        });

        taskEl.querySelector(".delete-btn").addEventListener("click", () => {
          deleteTaskWithUndo(tab, index);
        });

        taskEl.querySelector(".edit-btn").addEventListener("click", () => {
          openEditModal(tab, index, task.text);
        });

        list.appendChild(taskEl);
      });

    } else {
      list.style.display = "none";
    }
  });
}

function updateActiveTab(newTab) {
  tabs.forEach(t => t.classList.remove("active"));
  const tab = Array.from(tabs).find(t => t.dataset.tab === newTab);
  if (tab) tab.classList.add("active");
  activeTab = newTab;
  renderTasks();
}

tabs.forEach(tab => {
  tab.addEventListener("click", () => {
    updateActiveTab(tab.dataset.tab);
  });
});

// Always add to today tab
const addTaskBtn = document.querySelector(".add-task-btn");
addTaskBtn.addEventListener("click", () => {
  const input = document.querySelector(".task-input");
  const text = input.value.trim();
  if (!text) return;

  const tasks = loadTasks();
  tasks['today'].push({ text, done: false });
  saveTasks(tasks);
  input.value = "";
  if (activeTab === 'today') renderTasks();
});

// ======= Add Task Modal =======
const modal = document.getElementById("taskModal");
const modalInput = document.getElementById("modalTaskInput");
const modalSelect = document.getElementById("modalTabSelect");
const modalAddBtn = document.getElementById("modalAddBtn");
const modalCloseBtn = document.querySelector(".close-btn");
const openModalBtn = document.querySelector(".assign-task-btn");

openModalBtn.addEventListener("click", () => {
  modal.style.display = "flex";
  modalInput.value = "";
  modalSelect.value = "week";
});

modalCloseBtn.addEventListener("click", () => {
  modal.style.display = "none";
});

modalAddBtn.addEventListener("click", () => {
  const text = modalInput.value.trim();
  const tab = modalSelect.value;
  if (!text) return;

  const tasks = loadTasks();
  tasks[tab].push({ text, done: false });
  saveTasks(tasks);
  modal.style.display = "none";
  if (activeTab === tab) renderTasks();
});

window.addEventListener("click", (e) => {
  if (e.target === modal) {
    modal.style.display = "none";
  }
});

// ======= Edit Modal =======
const editModal = document.getElementById("editModal");
const editTaskInput = document.getElementById("editTaskInput");
const editSaveBtn = document.getElementById("editSaveBtn");
const editCloseBtn = document.querySelector(".close-edit-btn");

let editTarget = { tab: null, index: null };

function openEditModal(tab, index, currentText) {
  editTarget = { tab, index };
  editTaskInput.value = currentText;
  editModal.style.display = "flex";
}

editSaveBtn.addEventListener("click", () => {
  const newText = editTaskInput.value.trim();
  if (!newText) return;

  const tasks = loadTasks();
  tasks[editTarget.tab][editTarget.index].text = newText;
  saveTasks(tasks);
  editModal.style.display = "none";
  if (activeTab === editTarget.tab) renderTasks();
});

editCloseBtn.addEventListener("click", () => {
  editModal.style.display = "none";
});

window.addEventListener("click", (e) => {
  if (e.target === editModal) {
    editModal.style.display = "none";
  }
});

// ======= Initial Setup =======
updateActiveTab(activeTab);

// undo btn script 
const undoToast = document.getElementById('undoToast');
const undoBtn = document.getElementById('undoBtn');

let deletedTask = null; // to store last deleted task info
let undoTimeout = null;

// Modify your delete button event listener to this:
function deleteTaskWithUndo(tab, index) {
  const tasks = loadTasks();

  // Save deleted task for undo
  deletedTask = {
    tab,
    index,
    task: tasks[tab][index]
  };

  // Remove the task
  tasks[tab].splice(index, 1);
  saveTasks(tasks);
  renderTasks();

  // Show toast
  undoToast.style.display = 'flex';

  // Clear any previous timeout
  if (undoTimeout) clearTimeout(undoTimeout);

  // Hide toast after 5 seconds
  undoTimeout = setTimeout(() => {
    undoToast.style.display = 'none';
    deletedTask = null;
  }, 5000);
}

// Undo button click handler
undoBtn.addEventListener('click', () => {
  if (deletedTask) {
    const tasks = loadTasks();

    // Reinsert the deleted task at its original position
    tasks[deletedTask.tab].splice(deletedTask.index, 0, deletedTask.task);
    saveTasks(tasks);
    renderTasks();

    // Hide the toast and clear undo info & timeout
    undoToast.style.display = 'none';
    deletedTask = null;
    clearTimeout(undoTimeout);
  }
});
